# -*- coding:utf-8 -*-
from pathlib import Path
from typing import Union, List

from DataRecorder import ByteRecorder
from requests import Session

from .downloadKit import DownloadKit


class MissionData(object):
    """保存任务数据的对象"""

    def __init__(self, url: str, goal_path: Union[str, Path], rename: Union[str, None],
                 file_exists: str, split: bool, kwargs: dict, offset: int = 0):
        self.url: str = ...
        self.goal_path: Union[str, Path] = ...
        self.rename: Union[str, None] = ...
        self.file_exists: str = ...
        self.split: bool = ...
        self.kwargs: dict = ...
        self.offset: int = ...


class BaseTask(object):
    """任务类基类"""
    _DONE: str = ...
    RESULT_TEXTS: dict = ...

    def __init__(self, ID: Union[int, str]):
        self._id: str = ...
        self.state: str = ...

    @property
    def id(self) -> Union[int, str]: ...

    @property
    def data(self): ...

    @property
    def is_done(self) -> bool: ...

    def set_states(self,
                   result: Union[bool, None, str] = None,
                   info: str = None,
                   state: str = 'done') -> None: ...


class Mission(BaseTask):
    """任务类"""

    def __init__(self, ID: int, download_kit: DownloadKit, file_url: str, goal_path: Union[str, Path], rename: str,
                 file_exists: str, split: bool, kwargs: dict):
        self.info: str = ...
        self.file_name: str = ...
        self._data: MissionData = ...
        self._path: Union[str, Path] = ...
        self._recorder: ByteRecorder = ...
        self.size: float = ...
        self.done_tasks_count: int = ...
        self.tasks_count: int = ...
        self.tasks: List[Task] = ...
        self.download_kit: DownloadKit = ...
        self.session: Session = ...
        self.result: Union[str, None, bool] = ...
        self.method: str = ...

    def __repr__(self) -> str: ...

    def _set_session(self) -> Session: ...

    def _handle_kwargs(self, url: str, kwargs: dict) -> dict: ...

    @property
    def data(self) -> MissionData: ...

    @property
    def path(self) -> Union[str, Path]: ...

    def _set_path(self, path: Union[str, Path, None]) -> None: ...

    @property
    def recorder(self) -> ByteRecorder: ...

    @property
    def rate(self) -> Union[float, None]: ...

    def _set_done(self, result: Union[bool, None, str], info: str) -> None: ...

    def _a_task_done(self, is_success: bool, info: str) -> None: ...

    def _break_mission(self, result: Union[bool, None, str], info: str) -> None: ...

    def cancel(self) -> None: ...

    def del_file(self): ...

    def wait(self, show: bool = True, timeout: float = 0) -> tuple: ...


class Task(BaseTask):
    """子任务类"""

    def __init__(self, mission: Mission, range_: Union[list, None], ID: str):
        self._id: str = ...
        self.info: str = ...
        self.mission: Mission = ...
        self.range: Union[list, None] = ...

    def __repr__(self) -> str: ...

    @property
    def mid(self) -> int: ...

    @property
    def data(self) -> MissionData: ...

    @property
    def path(self) -> str: ...

    @property
    def file_name(self) -> str: ...

    def add_data(self, data: bytes, seek: int = None) -> None: ...

    def clear_cache(self) -> None: ...

    def _set_done(self, result: Union[bool, None, str], info: str) -> None: ...
